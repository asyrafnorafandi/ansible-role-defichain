# Modified version of defid.service from defichain package
# Primary modifications include running it from inside the /home/defi
# directory instead of system /usr/ directories

# See defid.service from defichain package for original service file details
# See "man systemd.service" for systemd details.

[Unit]
Description=DeFi Blockchain Daemon
After=network.target
StartLimitInterval=300
StartLimitBurst=3

[Service]
ExecStart={{ dfi_dir }}/bin/defid -daemon \
                            -pid={{ dfi_data_dir }}/defid.pid \
                            -conf={{ dfi_conf }} \
                            -datadir={{ dfi_data_dir }}

# Make sure the data directory is readable by the service user
ExecStartPre=/bin/mkdir -p {{ dfi_data_dir }}
ExecStartPre=/bin/chown defi:defi {{ dfi_data_dir }}

ExecStop=-{{ dfi_dir }}/bin/defi-cli stop

# We set this to a long one, just to be accomodative. 
TimeoutStopSec=10min

# Process management
####################

Type=forking
PIDFile={{ dfi_data_dir }}/defid.pid
Restart=on-failure
RestartSec=30

# Directory creation and permissions
####################################

# Run as defi user
User={{ node_user }}
Group={{ node_user }}

# Enable full access to the data dir
ReadWritePaths={{ dfi_data_dir }}

# Hardening measures
####################

# Provide a private /tmp and /var/tmp.
PrivateTmp=true

# Mount /usr, /boot/ and /etc read-only for the process.
ProtectSystem=full

# Deny access to /home, /root and /run/user
ProtectHome=false

# Disallow the process and all of its children to gain
# new privileges through execve().
NoNewPrivileges=true

# Use a new /dev namespace only populated with API pseudo devices
# such as /dev/null, /dev/zero and /dev/random.
PrivateDevices=true

# Deny the creation of writable and executable memory mappings.
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
